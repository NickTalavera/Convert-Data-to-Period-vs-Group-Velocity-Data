{\rtf1\ansi\ansicpg1252\cocoartf1404
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red34\green139\blue34;}
\margl1440\margr1440\vieww11900\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 function\cf0  [ wavesBadStandardDeviationsTossed, count_bad ] = tossBadStandardDeviations(waves, times, badDataFolder, maximumStandardDeviation, minimumTimeLength )
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 arrayOfElementsToRemove=zeros(1,length(waves'));
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 for\cf0  i=1:length(times) \cf3 %for each point in time for the trimmed surface wave
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0         \cf2 for\cf0  j=1:length(waves) \cf3 %for each trimmed wave
\fs24 \cf0 \

\fs20             \cf2 if\cf0  length(waves(j).surfaceWave)>=k \cf3 %if the trimmed surface wave is longer in length than the current point in time
\fs24 \cf0 \

\fs20                 \cf2 if\cf0  k>=2 && length(waves(j).surfaceWave)>=k
\fs24 \

\fs20                     \cf2 if\cf0  waves(j).time(k) >=40/150*max(times)
\fs24 \

\fs20                         \cf3 % %                         angleCheck=1/150*fliplr(waves(j).time(k));
\fs24 \cf0 \

\fs20                         angleCheck=0.9;
\fs24 \

\fs20                     \cf2 else
\fs24 \cf0 \

\fs20                         angleCheck=10;
\fs24 \

\fs20                     \cf2 end
\fs24 \cf0 \

\fs20                     
\fs24 \

\fs20                     y2=waves(j).surfaceWave(k);
\fs24 \

\fs20                     y1=waves(j).surfaceWave(k-1);
\fs24 \

\fs20                     x2=waves(j).time(k);
\fs24 \

\fs20                     x1=waves(j).time(k-1);
\fs24 \

\fs20                     u=[(x2-x1) y2-y1 0];
\fs24 \

\fs20                     v=[1 0 0];
\fs24 \

\fs20                     angle=atan2(norm(cross(u,v)),dot(u,v))*180/pi;
\fs24 \

\fs20                     \cf2 if\cf0  angle > angleCheck
\fs24 \

\fs20                         arrayOfElementsToRemove(j)=1;
\fs24 \

\fs20                         waves(j).time=waves(j).time(1:k-1);\cf3 %only keep the time data up to the bad point
\fs24 \cf0 \

\fs20                         waves(j).surfaceWave=waves(j).surfaceWave(1:k-1);\cf3 %only keep the surface wave data up to the bad point
\fs24 \cf0 \

\fs20                     \cf2 end
\fs24 \cf0 \

\fs20                 \cf2 end
\fs24 \cf0 \

\fs20             \cf2 end
\fs24 \cf0 \

\fs20         \cf2 end
\fs24 \cf0 \

\fs20     \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \

\fs20 \cf2 for\cf0  i=1:length(arrayOfElementsToRemove)
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0     \cf2 if\cf0  arrayOfElementsToRemove(i)==1
\fs24 \

\fs20         movefile(waves(i).name,badDataFolder) \cf3 %put the bad files in the badDataFolder
\fs24 \cf0 \

\fs20     \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf0 count_bad = sum(arrayOfElementsToRemove);
\fs24 \

\fs20 wavesBadStandardDeviationsTossed=waves(arrayOfElementsToRemove==0);
\fs24 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 end
\fs24 \cf0 \

\fs20 \cf2  
\fs24 \cf0 \
\
}